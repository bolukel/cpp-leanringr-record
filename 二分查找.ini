'''
class Solution {
public:
    long long minimumTime(vector<int>& time, int totalTrips) {
        ranges::sort(time);
        int n=time.size();
        long long t=0;
        for(t=0;;t++){
            long long cons=0;
            for(long long tim :time){
                cons+=t/tim;
            }
            if(cons>=totalTrips)
            break;
        }
        return t;
    }
};
'''
//暴力解法超出时间限制，寻找二分法查找适合的时间
class Solution {
public:
    long long minimumTime(vector<int>& time, int totalTrips) {
        ranges::sort(time);
        long long n=time.size();
        long long least=time[0],most=(long long)totalTrips*time[0];
        while(least<=most){
            long long middle=(least+most)/2;
            long long cons=0;
            for(long long tim :time){
                cons+=middle/tim;
            }
            if(cons<totalTrips)
            {
                least=middle+1;
            }else{
                most=middle-1;
            }
        }
        return least;
    }
};
//二分查找的模板，先while（区间不为空）写入条件这样可以使条件在每个循环中更新为初始值；
//然后用循环累计条件
//用if判断来决定左移或右移边界
//一半闭区间用最后左边界来表示满足条件的最小值。