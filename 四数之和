class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        // 对数组进行排序
        std::sort(nums.begin(), nums.end());
        int n = nums.size();
        
        // 初始化最接近的和和最小差值
        int sums = nums[0] + nums[1] + nums[2];
        int res = abs(sums - target);

        for (int i = 0; i < n - 2; i++) {
            // 避免重复计算
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            if(nums[0] + nums[1] + nums[2]>target) break;
            if(nums[n-1] + nums[n-2] + nums[n-3]<target) 
            {
                sums=nums[n-1] + nums[n-2] + nums[n-3];
                break;
            }

            int j = i + 1, k = n - 1;

            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                int diff = abs(sum - target);

                // 更新最接近的和和最小差值
                if (diff < res) {
                    res = diff;
                    sums = sum;
                }

                // 根据当前和调整指针
                if (sum > target) {
                    k--; // 当前和过大，移动右指针减小和
                } else if (sum < target) {
                    j++; // 当前和过小，移动左指针增加和
                } else {
                    return target; // 如果找到与目标值相等的和，直接返回
                }
            }
        }

        return sums;
    }
};
